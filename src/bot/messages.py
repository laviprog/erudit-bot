from datetime import datetime

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove

from src.bot.keyboards import get_reply_keyboard, get_inline_keyboard_for_profile_management, \
    get_reply_keyboard_start_registration, get_reply_keyboard_phone_number, get_inline_keyboard_for_event_registration, \
    get_inline_keyboard_for_application_management
from src.database.models import User, Event, Application, Status


class Message:

    def __init__(
            self,
            text: str,
            keyboard: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove = None,
            image_url: str = None,
    ):
        self.text = text
        self.keyboard = keyboard
        self.image_url = image_url

    async def send(self, sender: types.Message) -> None:
        if self.image_url:
            await sender.answer_photo(
                photo=self.image_url,
                caption=self.text,
                reply_markup=self.keyboard,
            )

        else:
            await sender.answer(
                self.text,
                reply_markup=self.keyboard,
            )

    async def edit(self, sender: types.Message) -> None:
        await sender.edit_text(
            self.text,
        )

    def to_dict(self) -> dict:
        return {key: value for key, value in self.__dict__.items() if value is not None}


async def get_welcome_message(user: User) -> Message:
    if user:
        return Message(
            text=(
                "Welcome text for active user"
            ),
            keyboard=await get_reply_keyboard()
        )

    return Message(
        text=(
            "Welcome text"
        ),
        keyboard=await get_reply_keyboard_start_registration()
    )


async def get_help_message() -> Message:
    return Message(
        text=(
            "–¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"
        ),
        keyboard=await get_reply_keyboard(),
    )


async def get_about_message() -> Message:
    return Message(
        text=(
            "–¢–µ–∫—Å—Ç –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö"
        ),
        keyboard=await get_reply_keyboard(),
    )


async def get_profile_message(user: User) -> Message:
    if not user:
        return Message(
            text=(
                "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ),
        )

    return Message(
        text=(
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"–ò–º—è: {user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        ),
        keyboard=await get_inline_keyboard_for_profile_management()
    )


async def get_message_with_reply_keyboard(
        text: str = "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –∫–æ–º–∞–Ω–¥"
) -> Message:
    return Message(
        text=text,
        keyboard=await get_reply_keyboard()
    )


async def get_start_registration_message(user):
    if user:
        return Message(
            text=(
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ ‚Üì "
            ),
        )

    return Message(
        text=(
            "–ù–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)"
        ),
        keyboard=ReplyKeyboardRemove(),
    )


async def get_phone_request_message():
    return Message(
        text=(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        ),
        keyboard=await get_reply_keyboard_phone_number(),
    )


async def get_phone_error_message() -> Message:
    return Message(
        text=(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        ),
    )


async def get_start_edit_profile_message() -> Message:
    return Message(
        text=(
            "–ù–∞—á–Ω–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)"
        ),
        keyboard=ReplyKeyboardRemove(),
    )


async def get_event_text(event: Event) -> str:
    return (
        f"üìÖ {event.event_time.strftime('%d.%m.%Y %H:%M')} - {event.title}\n"
        f"üìç {event.location}\n"
        f"üìù {event.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )


async def get_event_message(event: Event = None) -> Message:
    if not event:
        return Message(
            text=(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º —Å–æ–æ–±—â–∏–º –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö!"
            ),
        )

    return Message(
        text=await get_event_text(event),
        keyboard=await get_inline_keyboard_for_event_registration(event.id),
        image_url=event.image_url,
    )


async def get_application_text(application: Application) -> str:
    STATUS_LABELS = {
        Status.APPROVED: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
        Status.PENDING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        Status.DECLINED: "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
    }
    status = STATUS_LABELS.get(application.status, "‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

    return (
        f"üìå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {application.team_name}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {application.team_size}\n–°—Ç–∞—Ç—É—Å: {status}"
    )


async def get_application_message(application: Application, event: Event = None) -> Message:
    text = await get_application_text(application)

    if event:
        if event.end_registration_time < datetime.now():
            return Message(
                text=(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏"
                ),
            )

        else:
            event_text = await get_event_text(event)
            text = event_text + '\n\n' + text

    return Message(
        text,
        await get_inline_keyboard_for_application_management(application.id),
    )


async def get_message_no_applications() -> Message:
    return Message(
        text=(
            "–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è"
        ),
        keyboard=await get_reply_keyboard(),
    )


async def get_start_event_registration_message(event: Event) -> Message:
    return Message(
        text=(
            f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {event.title}"
        ),
    )


async def get_request_team_name_message() -> Message:
    return Message(
        text=(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã"
        ),
        keyboard=ReplyKeyboardRemove()
    )


async def get_request_team_size_message() -> Message:
    return Message(
        text=(
            "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ? (–æ—Ç 2 –¥–æ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)"
        ),
    )


async def get_team_size_value_error_message() -> Message:
    return Message(
        text=(
            "üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        ),
    )


async def get_team_size_error_message() -> Message:
    return Message(
        text=(
            "üö´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        ),
    )


async def get_start_edit_application_message(event: Event) -> Message:
    return Message(
        text=(
            f"–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {event.title}"
        ),
    )
